{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/scenario-1/Child.svelte","../../src/scenario-1/Child2.svelte","../../src/scenario-1/Scenario1.svelte","../../src/scenario-2/Cell.svelte","../../src/scenario-2/Row.svelte","../../src/scenario-2/Scenario2.svelte","../../src/scenario-3/Node.svelte","../../src/scenario-3/Scenario3.svelte","../../src/scenario-4/Child.svelte","../../src/scenario-4/Scenario4.svelte","../../src/scenario-5/Node.svelte","../../src/scenario-5/Scenario5.svelte","../../src/scenario-6/Node.svelte","../../src/scenario-6/Scenario6.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.35.0' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","<script>\n    export let id;\n</script>\n\n<div>{ id }</div>","<script>\n  export let id;\n</script>\n\n<span>{id}</span>\n","<script>\n  import Child from \"./Child.svelte\";\n  import Child2 from \"./Child2.svelte\";\n\n  let children = [];\n  let elements = [];\n  let numChildren = 0;\n  let childType = 1;\n\n  function addOne() {\n    children = [...children, { id: children.length + 1 }];\n  }\n\n  function remove() {\n    children = [];\n  }\n\n  function generateComponents() {\n    children = new Array(numChildren).fill(null).map((_, i) => ({ id: i }));\n  }\n\n  function generateElements() {\n    elements = new Array(numChildren).fill(null);\n  }\n\n  function onUpdateValue(event) {\n    numChildren = parseInt(event.target.value, 10);\n  }\n\n  function switchType() {\n    childType = 2;\n  }\n</script>\n\n<main>\n  <div>\n    <div>\n      <label>Number of components or elements to create</label>\n      <input\n        id=\"input-num-to-create\"\n        type=\"number\"\n        min=\"1\"\n        on:change={(event) => onUpdateValue(event)}\n      />\n      <button id=\"btn-generate-components\" on:click={generateComponents}>\n        Generate components\n      </button>\n      <button id=\"btn-generate-elements\" on:click={generateElements}>\n        Generate static elements\n      </button>\n      <button id=\"btn-switch-child-type\" on:click={switchType}>\n        Change child component type\n      </button>\n    </div>\n    <div>\n      <div>\n        <button id=\"btn-delete\" on:click={remove}>Delete all components</button>\n        <button id=\"btn-add-one\" on:click={addOne}>Add one component</button>\n      </div>\n    </div>\n    <div>\n      {#if childType === 1}\n        {#each children as child (child.id)}\n          <Child id={child.id} />\n        {/each}\n      {:else}\n        {#each children as child (child.id)}\n          <Child2 id={child.id} />\n        {/each}\n      {/if}\n      {#each elements as element}\n        <div>-</div>\n      {/each}\n    </div>\n  </div>\n</main>\n","\n<span>Prop value: { value }, internal value: { count }<button class=\"cell-btn-increment\" on:click=\"{increment}\">Update child</button></span>\n\n<script>\nlet count = 0;\nexport let value;\n\nfunction  increment() {\n    count += 1;\n}\n</script>\n","<script>\nimport Cell from \"./Cell.svelte\";\n\nexport let columns;\nlet count = 0;\nlet offset = 0;\n\nfunction onInput() {\n    count += 1;\n}\nfunction updateRow() {\n    offset += 1;\n}\n\n</script>\n\n  <div>\n    <div>\n      Row count: { count }\n      <button class=\"row-btn-update-children\" on:click=\"{updateRow}\">\n        Update children\n      </button>\n      <button class=\"row-btn-update-self\" on:click=\"{onInput}\">Upate parent</button>\n    </div>\n    {#each columns as column, i (column.id)}\n        <Cell value=\"{i + offset}\" />\n    {/each}    \n  </div>","\n<div>\n  <div>\n    <label>Number of rows</label>\n    <input\n      id=\"input-rows\"\n      type=\"number\"\n      min=\"1\"\n      on:change=\"{(event) => onUpdateRows(event.target.value)}\"\n    />\n    <label>Number of columns</label>\n    <input\n      id=\"input-columns\"\n      type=\"number\"\n      min=\"1\"\n      on:change=\"{(event) => onUpdateColumns(event.target.value)}\"\n    />\n    <button id=\"btn-generate\" on:click=\"{generate}\">\n      Generate\n    </button>\n  </div>\n  <div>\n  {#each rows as row (row.id)}\n    <Row columns=\"{row.columns}\" />\n  {/each}\n  </div>\n</div>\n\n<script>\nimport Row from \"./Row.svelte\";\n\nlet numRows = 0;\nlet numColumns = 0;\nlet rows = [];\n\nfunction generate() {\n  rows = new Array(numRows).fill(null).map((_, i) => ({\n    id: i,\n    columns: new Array(numColumns).fill(null).map((_, y) => ({\n      id: `row${i}-col${y}`,\n    })),\n  }));\n}\n\nfunction onUpdateColumns(value) {\n  numColumns = parseInt(value, 10);\n} function onUpdateRows(value) {\n  numRows = parseInt(value, 10);\n}\n  \n</script>\n","\n  <div>\n    {#if subtreeDepth > 0}\n        {#each Array(branchingFactor) as _ }\n            <svelte:self\n                subtreeDepth=\"{subtreeDepth - 1}\"\n                branchingFactor=\"{branchingFactor}\" />\n        {/each}\n    {:else}\n    <div>\n        { count }\n        <button class=\"btn-increment-leaf\" on:click=\"{increment}\">Update leaf</button>\n    </div>\n    {/if}\n  </div>\n\n<script>\nexport let branchingFactor;\nexport let subtreeDepth;\nlet count = 0;\n\nfunction increment() {\n    count += 1; \n}\n</script>\n","\n\n  <div>\n    <label>Select branching factor</label>\n    <input\n      id=\"input-branching-factor\"\n      :value=\"branchingFactor\"\n      on:change=\"{onUpdateBranchingFactor}\"\n    />\n    <label>Select tree depth</label>\n    <input\n      id=\"input-tree-depth\"\n      :value=\"treeDepth\"\n      on:change=\"{onUpdateTreeDepth}\"\n    />\n    <button id=\"btn-generate\" on:click=\"{generate}\">Generate tree</button>\n    <div>{ count }</div>\n    <button id=\"btn-increment-root\" on:click=\"{increment}\">Update root</button>\n    {#if initialized}\n        <div>\n        {#each Array(branchingFactor) as _}\n            <Node\n                branchingFactor=\"{branchingFactor}\"\n                subtreeDepth=\"{treeDepth - 1}\" />\n        {/each}\n        </div>\n    {/if}\n  </div>\n\n<script>\nimport Node from \"./Node.svelte\";\n\nlet branchingFactor = 0;\nlet treeDepth = 0;\nlet initialized = false;\nlet count = 0;\n\nfunction onUpdateBranchingFactor(event) {\n    branchingFactor = parseInt(event.target.value, 10);\n}\nfunction onUpdateTreeDepth(event) {\n    treeDepth = parseInt(event.target.value, 10);\n}\nfunction generate() {\n    initialized = true;\n}\nfunction increment() {\n    count += 1;\n}\n</script>\n","<script>\n  export let value;\n</script>\n\n<div>\n  <span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>{value}</span><span>-</span><span>-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  >\n</div>\n","<script>\n  import Child from \"./Child.svelte\";\n\n  let numStuff = 0;\n  let numChildren = 0;\n  let offset = 0;\n  $: children = new Array(numChildren).fill(null).map((_, i) => ({ id: i, value: i + offset }));\n\n  function generate() {\n    numChildren = numStuff;\n  }\n\n  function onChange(value) {\n    numStuff = parseInt(value, 10);\n  }\n\n  function update() {\n    offset += 1;\n  }\n\n  function updateSingle() {\n    const i = Math.floor(Math.random() * Math.floor(children.length));\n    children[i].value += 1;\n  }\n</script>\n\n<div>\n  <div>\n    <div>\n      <label>Number of components</label>\n      <input\n        id=\"input-components\"\n        type=\"number\"\n        min=\"1\"\n        :value=\"numChildren\"\n        on:change={(event) => onChange(event.target.value)}\n      />\n      <button id=\"btn-generate\" on:click={generate}>\n        Generate\n      </button>\n      <button id=\"btn-update\" on:click={update}>Update children</button>\n      <button id=\"btn-update-single\" on:click={updateSingle}>\n        Update single child\n      </button>\n    </div>\n    {#each children as child (child.id)}\n      <Child value={child.value} />\n    {/each}\n  </div>\n</div>\n","<script>\n  export let branchingFactor;\n  export let subtreeDepth;\n  let count = 0;\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  <span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span />\n  <div>\n    {count}\n    <button class=\"btn-increment-leaf\" on:click={increment}>Update leaf</button>\n  </div>\n  <span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span>-</span><span>-</span><span>-</span><span\n    >-</span\n  ><span>-</span><span>-</span><span />\n  {#if subtreeDepth > 0}\n    {#each Array(branchingFactor) as _}\n      <svelte:self subtreeDepth={subtreeDepth - 1} {branchingFactor} />\n    {/each}\n  {/if}\n</div>\n","\n\n  <div>\n    <label>Select branching factor</label>\n    <input\n      id=\"input-branching-factor\"\n      :value=\"branchingFactor\"\n      on:change=\"{onUpdateBranchingFactor}\"\n    />\n    <label>Select tree depth</label>\n    <input\n      id=\"input-tree-depth\"\n      :value=\"treeDepth\"\n      on:change=\"{onUpdateTreeDepth}\"\n    />\n    <button id=\"btn-generate\" on:click=\"{generate}\">Generate tree</button>\n    <div>{ count }</div>\n    <button id=\"btn-increment-root\" on:click=\"{increment}\">Update root</button>\n    {#if initialized}\n        <div>\n        {#each Array(branchingFactor) as _}\n            <Node\n                branchingFactor=\"{branchingFactor}\"\n                subtreeDepth=\"{treeDepth - 1}\" />\n        {/each}\n        </div>\n    {/if}\n  </div>\n\n<script>\nimport Node from \"./Node.svelte\";\n\nlet branchingFactor = 0;\nlet treeDepth = 0;\nlet initialized = false;\nlet count = 0;\n\nfunction onUpdateBranchingFactor(event) {\n    branchingFactor = parseInt(event.target.value, 10);\n}\nfunction onUpdateTreeDepth(event) {\n    treeDepth = parseInt(event.target.value, 10);\n}\nfunction generate() {\n    initialized = true;\n}\nfunction increment() {\n    count += 1;\n}\n</script>\n","<script>\n  export let branchingFactor;\n  export let subtreeDepth;\n  export let items;\n  let count = 0;\n\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  {#each items as item, i (i)}\n    <div key={i}>\n      <span>{item.value0}</span>\n      <span>{item.value1}</span>\n      <span>{item.value2}</span>\n      <span>{item.value3}</span>\n      <span>{item.value4}</span>\n      <span>{item.value5}</span>\n      <span>{item.value6}</span>\n      <span>{item.value7}</span>\n      <span>{item.value8}</span>\n      <span>{item.value9}</span>\n    </div>\n  {/each}\n  <div>\n    {count}\n    <button class=\"btn-increment-leaf\" on:click={increment}>Update leaf</button>\n  </div>\n  {#if subtreeDepth > 0}\n    {#each Array(branchingFactor) as _}\n      <svelte:self subtreeDepth={subtreeDepth - 1} {branchingFactor} {items} />\n    {/each}\n  {/if}\n</div>\n","<script>\n  import Node from \"./Node.svelte\";\n\n  let branchingFactor = 0;\n  let treeDepth = 0;\n  let initialized = false;\n  let count = 0;\n  let items = Array(10)\n    .fill(null)\n    .map(() => ({\n      value0: 0,\n      value1: 1,\n      value2: 2,\n      value3: 3,\n      value4: 4,\n      value5: 5,\n      value6: 6,\n      value7: 7,\n      value8: 8,\n      value9: 9,\n    }));\n\n  function onUpdateBranchingFactor(event) {\n    branchingFactor = parseInt(event.target.value, 10);\n  }\n  function onUpdateTreeDepth(event) {\n    treeDepth = parseInt(event.target.value, 10);\n  }\n  function generate() {\n    initialized = true;\n  }\n  function increment() {\n    count += 1;\n  }\n</script>\n\n<div>\n  <label>Select branching factor</label>\n  <input\n    id=\"input-branching-factor\"\n    :value=\"branchingFactor\"\n    on:change={onUpdateBranchingFactor}\n  />\n  <label>Select tree depth</label>\n  <input\n    id=\"input-tree-depth\"\n    :value=\"treeDepth\"\n    on:change={onUpdateTreeDepth}\n  />\n  <button id=\"btn-generate\" on:click={generate}>Generate tree</button>\n  <div>{count}</div>\n  <button id=\"btn-increment-root\" on:click={increment}>Update root</button>\n  {#if initialized}\n    <div>\n      {#each Array(branchingFactor) as _}\n        <Node {branchingFactor} subtreeDepth={treeDepth - 1} {items} />\n      {/each}\n    </div>\n  {/if}\n</div>\n","<script>\n  import Scenario1 from \"./scenario-1/Scenario1.svelte\";\n  import Scenario2 from \"./scenario-2/Scenario2.svelte\";\n  import Scenario3 from \"./scenario-3/Scenario3.svelte\";\n  import Scenario4 from \"./scenario-4/Scenario4.svelte\";\n  import Scenario5 from \"./scenario-5/Scenario5.svelte\";\n  import Scenario6 from \"./scenario-6/Scenario6.svelte\";\n\n  function selectScenario(value) {\n    selectedScenario = value;\n  }\n  let selectedScenario = null;\n  $: scenarioComponent =\n    selectedScenario === 1\n      ? Scenario1\n      : selectedScenario === 2\n      ? Scenario2\n      : selectedScenario === 3\n      ? Scenario3\n      : selectedScenario === 4\n      ? Scenario4\n      : selectedScenario === 5\n      ? Scenario5\n      : selectedScenario === 6\n      ? Scenario6\n      : null;\n</script>\n\n<main>\n  <div>\n    {#if selectedScenario == null}\n      <div>\n        <h4>Select scenario</h4>\n        <div>\n          <div>\n            <label> Scenario 1: Generate and delete components </label>\n            <button id=\"btn-scen-1\" on:click={() => selectScenario(1)}>\n              Select\n            </button>\n          </div>\n          <div>\n            <label>\n              Scenario 2: Update components in a flat DOM tree\n              <button id=\"btn-scen-2\" on:click={() => selectScenario(2)}>\n                Select\n              </button>\n            </label>\n          </div>\n          <div>\n            <label>\n              Scenario 3: Update components in a branching DOM tree\n              <button id=\"btn-scen-3\" on:click={() => selectScenario(3)}>\n                Select\n              </button>\n            </label>\n          </div>\n          <div>\n            <label>\n              Scenario 4: Update components containing mostly static content\n              <button id=\"btn-scen-4\" on:click={() => selectScenario(4)}\n                >Select</button\n              >\n            </label>\n          </div>\n          <div>\n            <label>\n              Scenario 5\n              <button id=\"btn-scen-5\" on:click={() => selectScenario(5)}\n                >Select</button\n              >\n            </label>\n          </div>\n          <div>\n            <label>\n              Scenario 6\n              <button id=\"btn-scen-6\" on:click={() => selectScenario(6)}\n                >Select</button\n              >\n            </label>\n          </div>\n        </div>\n      </div>\n    {:else}\n      <svelte:component this={scenarioComponent} />\n    {/if}\n  </div>\n</main>\n","import App from \"./App.svelte\";\n\nconst app = new App({\n  target: document.body,\n});\n\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","current_component","set_current_component","component","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","update","$$","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","destroy_block","lookup","key","outro_and_destroy_block","update_keyed_each","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","n","old_indexes","new_blocks","new_lookup","Map","deltas","child_ctx","get","set","Math","abs","will_move","did_move","m","first","new_block","old_block","new_key","old_key","create_component","mount_component","customElement","on_mount","on_destroy","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","bound","on_disconnect","context","callbacks","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","type","index","indexOf","splice","$$props","obj","$$set","keys","id","elements","numChildren","childType","onUpdateValue","parseInt","_","count","columns","offset","numRows","numColumns","rows","onUpdateColumns","onUpdateRows","y","branchingFactor","subtreeDepth","treeDepth","initialized","numStuff","onChange","floor","random","value0","value1","value2","value3","value4","value5","value6","value7","value8","value9","items","selectScenario","selectedScenario","scenarioComponent","Scenario1","Scenario2","Scenario3","Scenario4","Scenario5","Scenario6","body"],"mappings":"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"}